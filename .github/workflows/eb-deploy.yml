on:
  workflow_call:
    inputs:
      application_name:
        required: true
        type: string
      solution_stack_name:
        description: aws list-available-solution-stacks
        default: 64bit Amazon Linux 2 v3.4.3 running Python 3.8
        type: string
      region:
        description: AWS region to deploy to
        default: us-west-2
        type: string
      environment_name:
        default: dev
        #TODO: add this to frontend
        # required: true
        type: string
      platform:
        default: python-3.8 # eb platform list --region us-east-2
        type: string
      tags:
        default: dev
        type: string
    secrets:
      DOPPLER_TOKEN_STAGE:
        required: true

jobs:
  deploy:
    name: Deploy to AWS Elastic Beanstalk
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read
    env:
      AWS_DEFAULT_REGION: ${{ inputs.region }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      # - run: |
      #     cat << EOF > ./.ebextensions/02-env-doppler.config
      #     option_settings:
      #       "aws:elasticbeanstalk:application:environment":
      #         HISTIGNORE: DOPPLER_TOKEN*
      #         DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_STAGE }}

      #     commands:
      #       01-install-doppler:
      #         command: (curl -Ls --tlsv1.2 --proto "=https" --retry 3 https://cli.doppler.com/install.sh || wget -t 3 -qO- https://cli.doppler.com/install.sh) | sudo sh
      #     EOF

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: pip
      - name: install ebcli
        run: pip install awsebcli

      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: arn:aws:iam::364804350459:role/github-actions
          aws-region: ${{ inputs.region }}

      - name: eb environment name
        run: |
          ENV_NAME=${{ inputs.application_name }}-${{inputs.environment_name}}-${{inputs.platform}}-${{inputs.tags}}
          echo "ENV_NAME=${ENV_NAME//./-}" >> $GITHUB_ENV

      - run: eb --version

      - name: eb init
        #   uses: hmanzur/actions-aws-eb@v1.0.0
        run: eb init ${{ inputs.application_name }} --region ${{ inputs.region }} --platform ${{ inputs.platform }}

      # search for environment name (matches terminated environments until they're fully removed after ~1hr)
      # if the env already exists, then it will output 0 for success or 1 for failure
      # on failure - run the create env step
      # ensure intermediate steps pass on failed grep: https://stackoverflow.com/questions/73066461/github-actions-why-an-intermediate-command-failure-in-shell-script-would-cause
      - name: eb describe-environment (aws)
        id: describe
        run: |
          aws elasticbeanstalk describe-environments --environment-name ${{ env.ENV_NAME }} \
          | grep '"EnvironmentName": "${{ env.ENV_NAME }}"' \
          || echo "describe=$?" >> $GITHUB_OUTPUT \
          && exit 0

      - name: eb create environment
        if: ${{ steps.describe.outputs.describe == 1 }}
        run: eb create ${{ env.ENV_NAME }} --region ${{ inputs.region }} --platform ${{ inputs.platform }} --envvars DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN_STAGE }} --verbose

      - name: eb deploy
        run: eb deploy ${{ env.ENV_NAME }} --region ${{ inputs.region }} --message ${{ github.ref }} --process --verbose

      # - name: eb create environment
      #   if: ${{ steps.describe.outputs.describe == 1 }}
      #   uses: hmanzur/actions-aws-eb@v1.0.0
      #   with:
      #     command: "create ${{ env.ENV_NAME }} --region ${{ inputs.region }} --platform ${{ inputs.platform }} --verbose"
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}

      # - name: eb deploy
      #   uses: hmanzur/actions-aws-eb@v1.0.0
      #   with:
      #     command: "deploy ${{ env.ENV_NAME }} --region ${{ inputs.region }} --message ${{ github.ref }} --process --verbose"
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
