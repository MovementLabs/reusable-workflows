on:
  workflow_call:
    inputs:
      application_name:
        required: true
        type: string
      solution_stack_name:
        description: aws list-available-solution-stacks
        default: 64bit Amazon Linux 2 v3.4.2 running Python 3.8
        type: string
      region:
        description: AWS region to deploy to
        default: us-east-2
        type: string
      environment_name:
        default: staging
        #TODO: add this to frontend
        # required: true
        type: string
      platform:
        default: python-3.8 # eb platform list --region us-east-2
        type: string
jobs:
  build:
    name: Python install and build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4

      # - uses: actions/cache@v2
      #   with:
      #     path: ${{ env.pythonLocation }}
      #     key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}

      - name: Install requirements
        run: pip install -r requirements.txt

  deploy:
    name: Deploy to AWS Elastic Beanstalk
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read
    env:
      AWS_DEFAULT_REGION: ${{ inputs.region }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: arn:aws:iam::364804350459:role/github-actions
          aws-region: ${{ inputs.region }}

      # - name: Cache Docker images.
      #   uses: ScribeMD/docker-cache@0.2.6
      #   with:
      #     key: docker-${{ runner.os }}
      #     #TODO: add hashFiles if necessary?
      #     # key: docker-${{ runner.os }}-${{ hashFiles(...) }}

      - name: eb environment name
        run: |
          ENV_NAME=${{inputs.environment_name}}-${{inputs.platform}}-test3
          echo "ENV_NAME=${ENV_NAME//./-}" >> $GITHUB_ENV

      # - name: eb init
      #   uses: hmanzur/actions-aws-eb@v1.0.0
      #   with:
      #     command: "init ${{ inputs.application_name }} --region ${{ inputs.region }} --platform ${{ inputs.platform }}"
      #   env:
      # AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
      # AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
      - name: eb describe-environment (aws)
        id: describe
        run: |
          aws elasticbeanstalk describe-environments \
          --environment-name ${{env.ENV_NAME }} \
          | grep '"EnvironmentName": "${{ env.ENV_NAME }}"'); \
          echo "describe=$?" >> $GITHUB_OUTPUT;
        # run: >
        #   aws elasticbeanstalk describe-environments \
        #   --environment-name ${{env.ENV_NAME }}\
        #   | grep '"EnvironmentName": "${{ env.ENV_NAME }}"');
        #   echo "DESCRIBE=$?" >> $GITHUB_OUTPUT;

      - run: echo ${{ steps.describe.outputs.describe }}

      # - name: eb create environment
      #   uses: hmanzur/actions-aws-eb@v1.0.0
      #   # if: ${{ failure() }} # previous step failed
      #   if: ${{ steps.output.describe.DESCRIBE == 1}}
      #   with:
      #     command: "create ${{ env.ENV_NAME }} --region ${{ inputs.region }} --platform ${{ inputs.platform }} --single"
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}

      # - name: eb deploy
      #   uses: hmanzur/actions-aws-eb@v1.0.0
      #   with:
      #     command: "deploy ${{ env.ENV_NAME }} --region ${{ inputs.region }} --message ${{ github.ref }}"
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}

    # Linting, testing, etc. would go below this...
  # deploy:
  #   name: Deploy to AWS Elastic Beanstalk
  #   runs-on: ubuntu-latest
  #   needs: build
  #   permissions:
  #     id-token: write # This is required for requesting the JWT
  #     contents: read
  #   env:
  #     AWS_DEFAULT_REGION: ${{ inputs.region }}
  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v3

  #     # - name: Install EB CLI
  #     #   run: >
  #     #     python -m pip install --user virtualenv;
  #     #     export PATH="/home/runner/.ebcli-virtual-env/executables:$PATH";
  #     #     git clone https://github.com/aws/aws-elastic-beanstalk-cli-setup.git;
  #     #     python ./aws-elastic-beanstalk-cli-setup/scripts/ebcli_installer.py;
  #     #     cp /home/runner/.ebcli-virtual-env/executables/eb $GITHUB_WORKSPACE/bin/
  #     - name: Configure AWS credentials from Test account
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         role-to-assume: arn:aws:iam::364804350459:role/github-actions
  #         # role-to-assume: ${{ secrets.AWS_ROLE }}
  #         aws-region: ${{ inputs.region }}

  #       # echo "{EB_DESCRIBE_ENV}={$?}" >> $GITHUB_OUTPUT

  #     - name: eb environment name
  #       run: |
  #         ENV_NAME=${{inputs.environment_name}}-${{inputs.platform}}
  #         echo "ENV_NAME=${ENV_NAME//./-}" >> $GITHUB_ENV

  #     - name: eb init
  #       uses: hmanzur/actions-aws-eb@v1.0.0
  #       with:
  #         command: "init ${{ inputs.application_name }} --region ${{ inputs.region }} --platform ${{ inputs.platform }}"
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
  #         # AWS_DEFAULT_REGION: ${{ inputs.region }}

  #     - name: eb describe-environment (aws)
  #       run: |
  #         aws elasticbeanstalk describe-environments \
  #         --environment-name ${{env.ENV_NAME }}\
  #         | grep '"EnvironmentName": "${{ env.ENV_NAME }}"';

  #     - name: eb create environment
  #       uses: hmanzur/actions-aws-eb@v1.0.0
  #       if: ${{ failure() }} # previous step failed
  #       with:
  #         command: "create ${{ env.ENV_NAME }} --region ${{ inputs.region }} --platform ${{ inputs.platform }}"
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}

  #     - name: eb deploy
  #       uses: hmanzur/actions-aws-eb@v1.0.0
  #       with:
  #         command: "deploy ${{ env.ENV_NAME }} --region ${{ inputs.region }} --message ${{ github.ref }}"
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}

  #     # - name: Beanstalk describe then create
  #     #   run: |
  #     #     aws elasticbeanstalk describe-applications \
  #     #     | grep '"ApplicationName": "${{ inputs.application_name }}"' \
  #     #     || aws elasticbeanstalk create-application \
  #     #     --application-name ${{ inputs.application_name }}

  #     # - name: eb init
  #     #   run: |
  #     #     eb init ${{ inputs.application_name }} \
  #     #     --region ${{ inputs.region }} \
  #     #     --platform ${{ inputs.platform }}

  #     # - name: eb create
  #     #   run: |
  #     #     eb create ${{ inputs.environment_name }} \
  #     #     --region ${{ inputs.region }} \
  #     #     --platform ${{ inputs.platform }}

  #     # --platform ${{ inputs.platform }}

  #     - name: codecommit credentials
  #       run: |
  #         git config --global credential.helper '!aws codecommit credential-helper $@'; \
  #         git config --global credential.UseHttpPath true

  #     # - name: codecommit sync
  #     #   #TODO: setup variable for multiple regions
  #     #   run: git remote add codecommit-origin https://git-codecommit.${{ inputs.region }}.amazonaws.com/v1/repos/${{ inputs.application_name }}
  #     # - name: push codecommit push
  #     #   run: git push codecommit-origin
  #     # safely create (check if exists) application version
  #     # - name: Beanstalk create-application-version
  #     #   run: |
  #     #     aws elasticbeanstalk describe-application-versions \
  #     #     --version-label "ver-${{ github.sha }}" \
  #     #     | grep '"ApplicationName": "${{ inputs.application_name }}"' \
  #     #     || aws elasticbeanstalk create-application-version \
  #     #     --application-name ${{ inputs.application_name }} \
  #     #     --version-label "ver-${{ github.sha }}" \
  #     #     --description "commit-sha-${{ github.sha }}"

  #     # - name: Beanstalk create-environment
  #     #   run: |
  #     #     aws elasticbeanstalk describe-environments \
  #     #     --application-name ${{ inputs.application_name}} \
  #     #     | grep '"ApplicationName": "${{ inputs.application_name }}"' \
  #     #     || aws elasticbeanstalk create-environment \
  #     #     --application-name ${{ inputs.application_name}} \
  #     #     --environment-name ${{ inputs.environment_name }} \
  #     #     --solution-stack-name "${{ inputs.solution_stack_name }}"

  #     # # safe create (check if exists) environment
  #     # - name: Beanstalk create-environment
  #     #   run: |
  #     #     aws elasticbeanstalk describe-environments \
  #     #     --application-name ${{ inputs.application_name}} \
  #     #     | grep '"ApplicationName": "${{ inputs.application_name }}"' \
  #     #     || aws elasticbeanstalk create-environment \
  #     #     --application-name ${{ inputs.application_name}} \
  #     #     --environment-name ${{ inputs.environment_name }} \
  #     #     --solution-stack-name "${{ inputs.solution_stack_name }}"

  #     # - name: Beanstalk update-environment
  #     #   run: |
  #     #     aws elasticbeanstalk update-environment \
  #     #     --environment-name ${{ inputs.environment_name }} \
  #     #     --version-label "ver-${{ github.sha }}"

  #     # - name: Generate deployment package
  #     #   run: zip -r deploy.zip . -x '*.git*'

  #     # - name: Deploy to EB
  #     #   uses: einaregilsson/beanstalk-deploy@v21
  #     #   with:
  #     #     #TODO: where does this access token come from?
  #     #     aws_session_token: ${{ env.AWS_SESSION_TOKEN }}
  #     #     aws_access_key: ${{ env.AWS_ACCESS_KEY_ID }}
  #     #     aws_secret_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
  #     #     application_name: ${{ inputs.application_name }}
  #     #     environment_name: ${{ inputs.environment_name }}
  #     #     version_label: ${{ github.sha }}
  #     #     region: ${{ inputs.region }}
  #     #     deployment_package: deploy.zip
  #     #     use_existing_version_if_available: true
